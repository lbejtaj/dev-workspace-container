cd /home/joseph/

source /etc/bash_completion
source /home/joseph/.git-completion.bash
source /home/joseph/.hub-completion.bash

# Add kubectl completion
source <(kubectl completion bash)

# Add configuration for golang
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH

# Set etcdctl to use API v3
export ETCDCTL_API=3

# Add username for hub
export GITHUB_USER=JosephSalisbury

alias ls='ls -FGlh'
alias docker='sudo docker'
alias git='hub'
alias watch-last='watch "$(history | cut -c 8- | tail -n 2 | head -n 1)"'
alias go-test='go test -v $(glide novendor)'
alias go-build='go build -v'

# Enable vi editing mode
set -o vi

# Functions for quickly fetching repos
get-go () {
	go get -d github.com/giantswarm/$@ && return || \
	go get -d github.com/$@;
}
get-git () { git clone $@; }

# Function to swap to master, pull, and delete the old branch
git-finish() {
	BRANCH=$(git rev-parse --abbrev-ref HEAD)
	git checkout master
	git pull
	git branch -d $BRANCH
}

hack() {
	get-go $1;
	tmux split-window -h;
	printf "\033c";
	cd /home/joseph/go/src/github.com/giantswarm/$1;
	tmux send-keys -t right "cd /home/joseph/go/src/github.com/giantswarm/$1 && printf '\033c'" Enter;
	tmux select-pane -t left;
}

command_not_found_handle() {
    if [ -x /usr/lib/command-not-found ]; then
        /usr/lib/command-not-found -- "$1"
        return $?
    else
       return 127
    fi
}

# Secret management
if [ ! -f /secrets/gitcredentials ]; then
    echo "warning - git credentials not found"
fi

if [ ! -f /secrets/github_token ]; then
    echo "warning - github token not found"
fi

if [ ! -f /secrets/private-gpg ]; then
    echo "warning - private gpg key not found"
fi

if [ ! -f /secrets/public-gpg ]; then
    echo "warning - public gpg key not found"
fi

# Add token for hub
if [ -f /secrets/github_token ]; then
    export GITHUB_TOKEN=$(cat /secrets/github_token)
fi

# Add gpg secrets
if [ -f /secrets/private-gpg ] && [ -f /secrets/public-gpg ] ; then
    if ! gpg --list-keys 2>&1 | grep -q 'salisbury.joseph@gmail.com' ; then
        gpg --import /secrets/private-gpg > /dev/null 2>&1
        gpg --import /secrets/public-gpg > /dev/null 2>&1 
    fi
fi

# Configure kubectl
kubectl config set-cluster local-cluster \
    --server=https://$KUBERNETES_SERVICE_HOST \
    --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt > /dev/null 2>&1
kubectl config set-credentials local-admin \
    --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
    --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) > /dev/null 2>&1
kubectl config set-context local-system \
    --cluster=local-cluster --user=local-admin > /dev/null 2>&1
kubectl config use-context local-system > /dev/null 2>&1

# Set the terminal size - this can be an issue when running as a Kubernetes pod.
# See https://wiki.archlinux.org/index.php/working_with_the_serial_console#Resizing_a_terminal
stty cols 238 rows 60

PS1='$ '

